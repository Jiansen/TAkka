\chapter{Introduction}

% This introductory chapter presents the general background for problems 
% discussed in this thesis.  It summarizes main contributions of this thesis. 
% Finally, an overview of the thesis is given.

% \section{General Background and Problem}

Building reliable distributed applications is among the most difficult tasks 
facing programmers, and one which is becoming increasingly important due to the 
recent advent of web applications, cloud services, and mobile apps.  Modern 
society relies on distributed applications which are executed on heterogeneous 
runtime environments, are tolerant of partial failures, and sometimes 
dynamically upgrade some of their components without affecting other parts.

A distributed application typically consists of components which handle some 
tasks independently, while collaborating on other tasks by exchanging
messages.  The robustness of a distributed application, therefore, 
can be improved by (i) using a fault-tolerant design to minimise the 
aftermath of partial failures, or (ii) employing type checking to detect 
some errors, including the logic of component implementations, and 
communications between components.

One of the most influential fault-tolerant designs is the supervision 
principle, proposed in the first release of the Erlang/OTP library in 1997 
\citep{OTP}. The supervision principle states that concurrent components of an 
application should be encapsulated as actors, which make local decisions in 
response to received messages.  Actors form a tree structure, where a parent 
node is responsible for monitoring its children and restarting them when 
necessary. The supervision principle is proposed to increase the robustness of 
applications written in Erlang, a dynamically typed programming language.  
Erlang application developers can employ the supervision principle by using 
related API from the Erlang/OTP library.  It is reported that the supervision 
principle helped AXD301, an ATM (Asynchronous Transfer Mode) switch 
manufactured by Ericsson Telecom AB. for British Telecom, to achieve 
99.9999999\% (9 nines) uptime during a nine-month test \citep{ArmstrongAXD}. 
Nevertheless, adopting the Supervision principle is optional in Erlang 
applications.

Aside from employing good design patterns, programmers can use typed 
programming languages to construct reliable and maintainable 
programs.  Typed programming languages have the advantages of detecting some 
errors earlier, enforcing disciplined and modular programming, providing 
guarantees on language safety, and efficiency optimisation \citep{TPL}.

Can programmers benefit from the advantages of both the 
supervision tree and type checking?  In fact, attempts have been made in two 
directions: statically type checking Erlang programs and porting the 
supervision principle to statically typed systems.

Static checking in Erlang can be done via optional checking tools or 
rewriting applications using an Erlang variant that uses a statically typed 
system.  Static analysis tools of Erlang include the Dialyzer \citep{Dialyzer} 
and a fault tolerance analysis tool by \citet{JanHenry}.  The Dialyzer tool is 
shipped with Erlang.  It has identified a number of unnoticed errors in large 
Erlang applications that have been run for many years 
\citep{DialyzerDetecting}. Nevertheless, the use of Dialyzer and other 
analysis tools is often involved in the later stages of Erlang applications 
development.  In comparison with static analysis tools, simplified Erlang 
variants that use static type systems have been designed by 
\citet{marlow1997practical}, \citet{sabelfeld2002securing}, among others.  As 
the expressiveness is often sacrificed in those simplified variants to some 
extent, code modifications are more or less required to make existing 
Erlang programs go through the type checker.

The second attempt is porting the notion of actors and supervision trees to 
statically typed languages, including Scala and Haskell.  Scala actor 
libraries, 
including Scala Actors \citep{actor_1, actor_2} and Akka 
\citep{akka_api,akka_doc}, use 
dynamically typed messages even though Scala is a statically typed language.  
Some recent actor libraries, including Cloud Haskell \citep{CloudHaskell}, Lift 
\citep{lift_scala}, and scalaz \citep{scalaz}, support both 
dynamically and statically typed messages, but do not support supervision.  Can 
actors in supervision trees be statically typed? 

The key claim in this thesis is that actors in supervision trees can be 
statically typed by parameterizing the actor class with the type of messages it 
expects to receive.  Type-parameterized actors benefit both users and developers
of actor-based services. For users, sending ill-typed messages is prevented at 
compile time.  Because messages are usually transmitted asynchronously, it may 
be otherwise difficult to trace the source of errors at runtime, especially in 
distributed environments.  For service developers, since unexpected messages 
are eliminated from the system, they can focus on the logic of the services 
rather than worrying about incoming messages of unexpected types.  

Implementing type-parameterized actors in a statically-typed language, however, 
requires solving the following three problems:

\begin{enumerate}
  \item A typed name server is required to retrieve actor references of
specific types.  A distributed system usually requires a name server which
maps names of services to processes that implement that service.  If processes
are dynamically typed, the name server is usually implemented as a map from 
names to processes. Can a distributed name server maintain maps from the typed 
names and processes of corresponding types, and provide API for 
registering and fetching statically typed processes?

  \item A supervisor actor must interact with child actors of different types. 
Each actor in a supervision tree needs to handle messages for both the purpose 
of supervision and its own specific interests.  When all actors are 
parameterized by different types, is it practical to define a supervisor that 
communicates with children of different types?

  \item Actors that receive messages from distinct parties may suffer from the 
type pollution problem, whereby a party imports too much type information 
about an actor and can send the actor messages not expected from it. Systems 
built on a layered architecture or the MVC model are often victims of the type 
pollution problem. As an actor receives messages from distinct parties using its 
sole channel, its type parameter is the union type of all expected message 
types. Therefore, unexpected messages can be sent to an actor which naively 
publishes its type parameter or permits dynamically typed messages. Can a 
type-parameterized actor publish itself as different types when it communicates 
with different parties?
\end{enumerate}

\paragraph{Contributions}

The overall goal of the thesis is to develop a framework that makes it possible 
to construct reliable distributed applications written using and verified by 
our libraries which merges the advantages of type checking and the supervision 
principle.  The key contributions of this thesis are:

\begin{itemize}
\begin{comment}
  \item A formal model that captures the essence of the supervision principle.  
  The model (Chapter~\ref{supervision_model}) exhibits key features of the 
  supervision principle used in existing libraries including Erlang, Akka, and 
  TAkka. It provides a tool to compare the design alternatives of the 
  supervision principle.  
\end{comment}  
  \item The design and implementation of the TAkka library (Chapter~\ref{takka_design}), where supervised 
actors are parameterized by the type of messages they expect.  The library 
  mixes static and dynamic type checking so that type
  errors are detected at the earliest opportunity.  The library separates 
  message types and message handlers for the purpose of supervision from those 
  for actor specific communications.  The decision is made so that   
  type-parameterized actors of different types can form a supervision tree. 
%  Interestingly, this decision coincides with our recommendation in the model 
%  analysis for improving availability.  
  Chapter~\ref{evolution} shows that Akka 
  programs can be upgraded to their TAkka equivalents incrementally, one module 
  at a time (evolution), rather 
  than requiring a monolithic change to all modules simultaneously (revolution).  The
  design is analogous to a design principle of Java Generics, known as ``Evolution,
  not Revolution''

  
  \item A framework for evaluating libraries that supports the supervision 
  principle. Chapter~\ref{takka_evaluation} shows that the type pollution 
  problem can be straightforwardly avoided in TAkka.  The evaluation further 
  compares the TAkka library and the Akka library in terms of expressiveness, efficiency and 
  scalability. Results show that TAkka applications add minimal runtime overhead 
  to the underlying Akka system and have a similar code size and scalability 
  compared with their Akka equivalents. Finally, TAkka ports the Chaos Monkey 
  library and design a Supervision View library.  The Chaos Monkey library tests whether 
  exceptions are properly handled by supervisors.  The Supervision View library 
  dynamically captures the structure of supervision trees. We believe that similar 
  evaluations can be done in Erlang and new libraries that support the supervision 
  principle.
\begin{comment}  
  \item A model for analyzing the reliability and availability of 
  fault-tolerant systems that use the {\it reactive} mechanism (supervision) 
  and the {\it proactive} mechanism (software rejuvenation).  The novel model 
  (Chapter~\ref{rejuvenation_model}) overcomes the limitation of the classic 
  software rejuvenation model where the failure rate is treated as a constant
  and failure recovery is ironically treated as a stochastic process.  
  \mycomment{add new contributions once achieved}
  \mycomment{efficient approximate estimation}
  \mycomment{? the classic model is the least accurate approximation. ?}  
\end{comment}  
\end{itemize}


\paragraph{Thesis Outline} The rest of this thesis is structured as the followings.
Chapter~\ref{background} summarises work that influences the design and implementation
of the TAkka library.  It introduces elements of the Actor Programming model and the 
Supervision principle, together with short explanations of their usages in the Erlang 
language and the Akka library.  Chapter~\ref{background} concludes with features of the
Scala type system used in the TAkka implementation.   Chapter~\ref{takka_design} to \ref{takka_evaluation}
are expanded for a companion paper of this thesis.  The paper is submitted to the Scala 2014
Workshop.  It is structured to compare TAkka with Akka.  This thesis, on the other hand,
elaborates the rational for the TAkka design and implementation.   Chapter~\ref{takka_design} 
presents the design and implementation of the TAkka library.  Chapter~\ref{evolution} shows that



to \ref{takka_evaluation}

