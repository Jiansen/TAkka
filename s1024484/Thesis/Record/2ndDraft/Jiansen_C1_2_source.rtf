{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f4\fswiss\fprq2\fcharset0 Liberation Sans{\*\falt Arial};}{\f5\froman\fprq0\fcharset1 Times New Roman;}{\f6\froman\fprq0\fcharset1 Courier New;}{\f7\fnil\fprq2\fcharset0 DejaVu Sans;}{\f8\fnil\fprq2\fcharset0 Arial;}{\f9\fnil\fprq2\fcharset0 Lohit Hindi;}{\f10\fnil\fprq0\fcharset1 Lohit Hindi;}{\f11\fnil\fprq2\fcharset0 Courier New;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green0\blue128;\red128\green128\blue128;}
{\stylesheet{\s0\snext0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057 Normal;}
{\s1\sbasedon0\snext20\ilvl0\outlinelevel0\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs40 Heading 1;}
{\s2\sbasedon0\snext20\ilvl1\outlinelevel1\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32 Heading 2;}
{\s3\sbasedon0\snext20\ilvl2\outlinelevel2\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32 Heading 3;}
{\s4\sbasedon0\snext20\ilvl3\outlinelevel3\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24 Heading 4;}
{\s5\sbasedon0\snext20\ilvl4\outlinelevel4\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24 Heading 5;}
{\s6\sbasedon0\snext20\ilvl5\outlinelevel5\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24 Heading 6;}
{\*\cs15\snext15 Default Paragraph Font;}
{\*\cs16\sbasedon15\snext16\super endnote reference;}
{\*\cs17\snext17 Endnote Characters;}
{\*\cs18\snext18\cf3\ul\ulc0\langfe255\alang255\lang255 Internet Link;}
{\s19\sbasedon0\snext20\qj\widctlpar\sb240\sa120\keepn\ltrpar\dbch\af7\dbch\af9\afs28\loch\f4\fs28 Heading;}
{\s20\sbasedon0\snext20\qj\widctlpar\sb0\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 Text Body;}
{\s21\sbasedon0\snext21\ql\widctlpar\tx566\li283\ri0\lin283\rin0\fi-283\sb0\sa120\ltrpar\dbch\af8\dbch\af10\afs24\loch\f5\fs20 List;}
{\s22\sbasedon0\snext22\qj\widctlpar\sb120\sa120\noline\ltrpar\i\dbch\af8\dbch\af10\afs24\ai\loch\f5\fs24 Caption;}
{\s23\sbasedon0\snext23\qj\widctlpar\noline\ltrpar\dbch\af8\dbch\af10\afs24\loch\f5\fs24 Index;}
{\s24\sbasedon0\snext24\qc\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs40 Part;}
{\s25\sbasedon0\snext25\qr\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 rightpar;}
{\s26\sbasedon0\snext26\qc\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 centerpar;}
{\s27\sbasedon0\snext27\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 equation;}
{\s28\sbasedon0\snext28\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 equationNum;}
{\s29\sbasedon0\snext29\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 equationAlign;}
{\s30\sbasedon0\snext30\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 equationAlignNum;}
{\s31\sbasedon0\snext31\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 equationArray;}
{\s32\sbasedon0\snext32\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 equationArrayNum;}
{\s33\sbasedon0\snext33\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20 theorem;}
{\s34\sbasedon0\snext34\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 bitmapCenter;}
{\s35\sbasedon0\snext20\qc\widctlpar\sb240\sa240\ltrpar\b\dbch\af8\dbch\af11\afs36\ab\loch\f5\fs36 Title;}
{\s36\sbasedon0\snext36\qc\widctlpar\sb0\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 author;}
{\s37\sbasedon0\snext37\ql\widctlpar\tqc\tx4536\tqr\tx9072\noline\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20 Footer;}
{\s38\sbasedon0\snext38\ql\widctlpar\tqc\tx4536\tqr\tx9072\noline\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20 Header;}
{\s39\sbasedon0\snext39\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 caption;}
{\s40\sbasedon0\snext40\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20 Figure;}
{\s41\sbasedon0\snext41\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20 Table;}
{\s42\sbasedon0\snext42\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20 Tabular;}
{\s43\sbasedon0\snext43\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20 Tabbing;}
{\s44\sbasedon0\snext44\qj\widctlpar\li1024\ri1024\lin1024\rin1024\fi340\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20 Quote;}
{\s45\snext45\ql\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f6\fs24\lang2057 verbatim;}
{\s46\sbasedon0\snext46\ql\widctlpar\tx566\li283\ri0\lin283\rin0\fi-283\sb0\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20 List 1;}
{\s47\sbasedon0\snext47\qc\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 latex picture;}
{\s48\sbasedon0\snext48\qc\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 subfigure;}
{\s49\sbasedon0\snext49\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32 bibheading;}
{\s50\sbasedon0\snext50\ql\widctlpar\li567\ri0\lin567\rin0\fi-567\sb0\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20 bibitem;}
{\s51\sbasedon0\snext51\ql\widctlpar\tx566\li283\ri0\lin283\rin0\fi-283\sb0\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20 endnotes;}
{\s52\sbasedon0\snext52\ql\widctlpar\li397\ri0\lin397\rin0\fi-113\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 footnote text;}
{\s53\sbasedon0\snext53\qj\widctlpar\li454\ri0\lin454\rin0\fi-170\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 endnote text;}
{\s54\sbasedon0\snext54\ql\widctlpar\sb60\sa60\keepn\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 acronym;}
{\s55\sbasedon0\snext55\qc\widctlpar\sb0\sa120\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24 abstract title;}
{\s56\sbasedon0\snext56\qj\widctlpar\li1024\ri1024\lin1024\rin1024\fi340\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 abstract;}
{\s57\sbasedon0\snext57\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs20 contents_heading;}
{\s58\sbasedon0\snext58\ql\widctlpar\tldot\tqr\tx8647\li425\ri0\lin425\rin0\fi0\sb240\sa60\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24 Contents 1;}
{\s59\sbasedon0\snext59\ql\widctlpar\tldot\tqr\tx8734\li512\ri0\lin512\rin0\fi0\sb60\sa60\keepn\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 Contents 2;}
{\s60\sbasedon0\snext60\ql\widctlpar\tldot\tqr\tx9246\li1024\ri0\lin1024\rin0\fi0\sb60\sa60\keepn\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 Contents 3;}
{\s61\sbasedon0\snext61\ql\widctlpar\tldot\tqr\tx9758\li1536\ri0\lin1536\rin0\fi0\sb60\sa60\keepn\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 Contents 4;}
{\s62\sbasedon0\snext62\ql\widctlpar\tldot\tqr\tx10270\li2048\ri0\lin2048\rin0\fi0\sb60\sa60\keepn\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 Contents 5;}
{\s63\sbasedon0\snext63\ql\widctlpar\tldot\tqr\tx10782\li2560\ri0\lin2560\rin0\fi0\sb60\sa60\keepn\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24 Contents 6;}
}{\*\listtable{\list\listtemplateid1
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-432\li432}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-576\li576}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-720\li720}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-864\li864}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1008\li1008}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1152\li1152}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1296\li1296}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1440\li1440}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1584\li1584}\listid1}
}{\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}{\info{\title Original file was Jiansen.tex}{\doccomm Created using latex2rtf 2.3.5 r1236 (released Jan 17 2014) on Fri Feb 14 13:48:31 2014}{\creatim\yr0\mo0\dy0\hr0\min0}{\revtim\yr0\mo0\dy0\hr0\min0}{\printim\yr0\mo0\dy0\hr0\min0}{\comment LibreOffice}{\vern67175170}}\deftab720\deftab720
\viewscale100
{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn12280\pghsxn15900\marglsxn2680\margrsxn2700\margtsxn2540\margbsxn1760\footery720{\footer\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\qc{\rtlch \ltrch
{\field{\*\fldinst  PAGE }{\fldrslt 27}}}
\par }\pgdscnxt0 Default Style;}
{\pgdsc1\pgdscuse451\pgndec\pgwsxn11906\pghsxn16838\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt1 Endnote;}}
\formshade{\*\pgdscno0}\paperh15900\paperw12280\margl2680\margr2700\margt2540\margb720\sectd\sbknone\sectunlocked1\pgndec\pgwsxn12280\pghsxn15900\marglsxn2680\margrsxn2700\margtsxn2540\margbsxn1760\footery720{\footer\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\qc{\rtlch \ltrch
{\field{\*\fldinst  PAGE }{\fldrslt 27}}}
\par }\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnar
\pgndec\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\b\rtlch \ltrch\loch\fs20\lang2057
Chapter 1 }{\rtlch \ltrch\loch\lang2057
Introduction}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb240\sa0{\rtlch \ltrch\loch\lang2057
Building reliable distributed applications is among the most difficult tasks facing programmers, and becoming increasingly important due to the recent advent of web applications, cloud services, and mobile apps. Modern society relies on distributed applications which are executed on heterogeneous runtime environments, are tolerant of partial failures, and sometimes dynamically upgrade some of their components without affecting other parts.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
A distributed application typically consists of components which handle some tasks independently, while collaborating on some other tasks by sending messages to each other. The robustness of a distributed application, therefore, can be improved by (i) using a fault-tolerant design to minimise the aftermath of partial failures, or (ii) employing type checking to detect some errors, including logic of component implementations and communications between components.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
One of the most influential fault-tolerant designs is the supervision principle, proposed in the first release of the Erlang/OTP library in 1997 [Ericsson AB., 2013c]. The supervision principle states that concurrent components of an application should be encapsulated as actors, which make local decisions in response to received messages, and formed in a tree structure, where a parent node is responsible for monitoring its children and restarting them when necessary. The supervision principle is proposed to increase the robustness of applications written in Erlang, a dynamically typed programming language. Erlang application developers can employ the supervision principle by using related APIs from the Erlang/OTP library. It is reported that the supervision principle helped AXD301, an ATM (Asynchronous Transfer Mode) switch manufactured by Ericsson Telecom AB. for British Telecom, to achieve 99.9999999% (9 nines) uptime during a nine-month test [Armstrong, 2002]. Nevertheless, adopting the Supervision principle is optional in Erlang applications.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Aside from employing good design patterns, programmers can use typed programming languages to construct reliable and maintainable programs. Typed programming languages have the advantages of detecting some errors earlier, enforcing disciplined and modular programming, providing safety gurantee on language safety, efficiency optimisation, and other benefits [Pierce, 2002].}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Can programmers benefit from the advantages of both the supervision tree and type checking?  In fact, attempts have been made in two directions: statically type checking Erlang programs and porting the supervision principle to statically typed systems.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Static checking in Erlang can be done via optional checking tools or rewriting applications using an Erlang variant that uses a statically typed system. Static analysis tools of Erlang includes the Dialyzer [Ericsson AB., 2013a] and a fault tolerance analysing tool by Nystr\u246\'f6m [2009]. The Dialyzer tool is shipped with Erlang. It has identified a number of unnoticed errors in large Erlang applications that have been run for many years [Lindahl and Sagonas, 2004]. Nevertheless, the use of Dialyzer and other analysing tools is often involved in later stages of Erlang applications development. In comparison with static analysing tools, simplified Erlang variants that use static type systems have been designed by Marlow and Wadler [1997], Sabelfeld and Mantel [2002], among others. As the expressiveness is often sacrificed in those simplified variants to some extent, code modifications are more or less required to make existing Erlang programs go through the type checker.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
The second attempt is porting the notion of actors and supervision trees to statically typed languages, including Scala and Haskell. Scala actor libraries, including Scala Actors [Haller and Odersky, 2006, 2007] and Akka [Typesafe Inc. (a), 2012; Typesafe Inc. (b), 2012], use dynamically typed messages even though Scala is a statically typed language. Some recent actor libraries, including Cloud Haskell [Epstein et\~al., 2011], Lift [Typelevel ORG, 2013] , and scalaz [WorldWide Conferencing, LLC, 2013], support both dynamically and statically typed messages, but do not support supervision. Can actors in supervision trees be statically typed?  }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
The key claim in this thesis is that actors in supervision trees can be statically typed by parameterizing the actor class with the type of messages it expects to receive. Type-parameterized actors benefit both users and developers of actor-based services. For users, sending ill-typed messages is prevented at compile time. Because messages are usually transmitted asynchronously, it may be otherwise difficult to trace the source of errors at runtime, especially in distributed environments. For service developers, since unexpected messages are eliminated from the system, they can focus on the logic of the services rather than worrying about incoming messages of unexpected types. }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Implementing type-parameterized actors in a statically-typed language; however, requires solving the following three problems.}
\par \pard\plain \s21\ql\widctlpar\tx566\li283\ri0\lin283\rin0\fi-283\sb0\sa120\ltrpar\dbch\af8\dbch\af10\afs24\loch\f5\fs20\sl100\slmult0\li600\ri0\lin600\rin0\fi-300{\rtlch \ltrch\loch\fs24\lang2057
1.\tab A typed name server is required to retrieve actor references of specific types. A distributed system usually requires a name server which maps names of services to processes that implement that service. If processes are dynamically typed, the name server is usually implemented as a map from names to processes. Can a distributed name server maintain maps from the typed names and processes of corresponding types, and provide APIs for registering and fetching statically typed processes? }
\par \pard\plain \s21\ql\widctlpar\tx566\li283\ri0\lin283\rin0\fi-283\sb0\sa120\ltrpar\dbch\af8\dbch\af10\afs24\loch\f5\fs20\sl100\slmult0\li600\ri0\lin600\rin0\fi-300{\rtlch \ltrch\loch\fs24\lang2057
2.\tab A supervisor actor must interact with child actors of different types. A supervisor actor must interact with child actors of different types. Each actor in a supervision tree needs to handle messages for both the supervision purpose and messages for its specific interests. When all actors are parameterized by different types, is it practical to define a supervisor that communicates with children of different types? }
\par \pard\plain \s21\ql\widctlpar\tx566\li283\ri0\lin283\rin0\fi-283\sb0\sa120\ltrpar\dbch\af8\dbch\af10\afs24\loch\f5\fs20\sl100\slmult0\li600\ri0\lin600\rin0\fi-300{\rtlch \ltrch\loch\fs24\lang2057
3.\tab Actors that receive messages from distinct parties may suffer from the type pollution problem, in which case a party imports too much type information about an actor and can send the actor messages not expected from it. Systems built on a layered architecture or the MVC model are often victims of the type pollution problem. As an actor receives messages from distinct parties using its sole channel, its type parameter is the union type of all expected message types. Therefore, unexpected messages can be sent to an actor which naively publishes its type parameter or permits dynamically typed messages. Can a type-parameterised actor publish itself as different types when it communicates with different parties?  }
\par \pard\plain \s5\ilvl4\outlinelevel4\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24{\listtext\pard\plain \tab}\ls1 \li1008\ri0\lin1008\rin0\fi-1008\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
Contributions}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
The overall goal of the thesis is to develop a framework that makes it possible to construct reliable distributed applications written using and verified by our libraries which merges the advantages of type checking and the supervision principle. The key contributions of this thesis are:}
\par \pard\plain \s21\ql\widctlpar\tx566\li283\ri0\lin283\rin0\fi-283\sb0\sa120\ltrpar\dbch\af8\dbch\af10\afs24\loch\f5\fs20\sl100\slmult0\li600\ri0\lin600\rin0\fi-300{\rtlch \ltrch\fs24\lang2057
\u8226\'22}{\rtlch \ltrch\loch\fs24\lang2057
\tab The design and implementation of the TAkka library, where supervised actors are parameterized by the type of messages they expect. The library (Chapter }{\rtlch \ltrch\loch\fs24\lang2057
{\field{\*\fldinst  REF Mtakka_design \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\fs24\lang2057
) mixes statical and dynamical type checking so that type errors are detected at the earliest opportunity. The library separates message types and message handlers for the supervision purpose from those for actor specific communications. The decision is made so that type-parameterized actors of different types can form a supervision tree. In addition, the TAkka library is carefully designed so that Akka programs can gradually migrate to their TAkka equivalents (evolution) rather than require providing type parameters everywhere (revolution). Moreover, the type pollution problem can be straightforwardly avoided in TAkka.}
\par \pard\plain \s21\ql\widctlpar\tx566\li283\ri0\lin283\rin0\fi-283\sb0\sa120\ltrpar\dbch\af8\dbch\af10\afs24\loch\f5\fs20\sl100\slmult0\li600\ri0\lin600\rin0\fi-300{\rtlch \ltrch\fs24\lang2057
\u8226\'22}{\rtlch \ltrch\loch\fs24\lang2057
\tab A framework for evaluating libraries that support the supervision principle. The evaluation (Chapter }{\rtlch \ltrch\loch\fs24\lang2057
{\field{\*\fldinst  REF Mtakka_evaluation \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\fs24\lang2057
) compares the TAkka library and the Akka library in terms of expressiveness, efficiency and scalability. Results show that TAkka applications add minimal runtime overhead to the underlying Akka system and have a similar code size and scalability compared with their Akka equivalents. Finally, we port the Chaos Monkey library and design a Supervision View library. The Chaos Monkey library tests whether exceptions are properly handled by supervisors. The Supervision View library dynamically captures the structure of supervision trees. We believe that similar evaluations can be done in Erlang and new libraries that support the supervision principle.  }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0\rtlch \ltrch\loch

\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\pagebb\sl100\slmult0\ql\li0\ri0\lin0\rin0\fi0\sb60\sa120\keepn{\b\rtlch \ltrch\loch\fs40\lang2057
Chapter 2 }{\rtlch \ltrch\loch\lang2057
Background and Related Work}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb240\sa0{\rtlch \ltrch\loch\lang2057
This Chapter summarises work that influences the design and implementation of the TAkka library. This Chapter begins with a general introduction on the Actor programming model and the Supervision principle. This Chapter explains how to use the Actor programming model and the Supervision principle in the Erlang programming language and the Akka library. This Chapter completes with a summary of the type system and pattern matching in Scala. The Actor model makes concurrent programming easy. The Supervision principle makes applications robust. The Supervision principle is introduced by the Erlang language. It becomes obligatory in the Akka library, which is implemented in the Scala language. The Scala language has a sophisticated type system, which enables the experiments of building a more powerful and easier to use library, TAkka.}
\par \pard\plain \s2\ilvl1\outlinelevel1\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32{\listtext\pard\plain \tab}\ls1 \li576\ri0\lin576\rin0\fi-576\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{{\*\bkmkstart BMactor_general}\rtlch \ltrch\loch\lang2057
1}{{\*\bkmkend BMactor_general}\rtlch \ltrch\loch\lang2057
  The Actor Programming Model}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
The Actor Programming Model is first proposed by Hewitt et\~al. [1973] for the purpose of constructing concurrent systems. In the model, a concurrent system consists of actors which are primitive computational components. Actors communicate with each other by sending messages. Each actor independently reacts to messages it receives.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
The Actor model given in [Hewitt et\~al., 1973] does not specify its formal semantics and hence does not suggest implementation strategies neither. An operational semantics of the Actor model is developed by Gerif [Grief, 1975]. Baker and Hewitt [1977] later define a set of axiomatic laws for Actor systems. Other semantics of the Actor model includes the denotational semantics given by Clinger [1981] and the transition-based semantic model by Agha [1985]. Meanwhile, the Actor model has been implemented in Act 1 [Lieberman, 1981], a prototype programming language. The model influences designs of Concurrency Oriented Programming Languages (COPLs), especially the Erlang programming language [Armstrong, 2007b], which has been used in enterprise-level applications since it was developed in 1986.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
A recent trend is adding actor libraries to full-fledged popular programming languages that do not have actors built-in. Some of the recent actor libraries are JActor [JActor Consulting Ltd, 2013] for the JAVA language, Scala Actor [Haller and Odersky, 2006, 2007] for Scala, Akka [Typesafe Inc. (b), 2012] for Java and Scala, and CloudHaskell [Epstein et\~al., 2011] for Haskell.}
\par \pard\plain \s2\ilvl1\outlinelevel1\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32{\listtext\pard\plain \tab}\ls1 \li576\ri0\lin576\rin0\fi-576\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{\rtlch \ltrch\loch\lang2057
2  The Supervision Principle}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
The core idea of the supervision principle is that actors should be monitored and restarted when necessary by their supervisors in order to improve the availability of a software system. The supervision principle is first proposed in the Erlang OTP library [Ericsson AB., 2013c] and is adopted by the Akka library [Typesafe Inc. (b), 2012].}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
A supervision tree in Erlang consists of two types of actors: workers and supervisors. A worker implements part of the business logic and reacts to request messages. A supervisor is responsible for initializing and monitoring its children, which are workers or supervisors for other actors, and restarting its children when necessary. The behaviour of a supervisor is defined by its }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
supervision strategy}{\rtlch \ltrch\loch\lang2057
.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
The Akka library makes supervision obligatory. In Akka, every user-created actor is either a child of the system guidance actor or a child of another user-created actor. Therefore, every Akka actor is potentially the supervisor of some other actors. Unlike the Erlang system, an Akka actor can be both a worker and a supervisor.}
\par \pard\plain \s2\ilvl1\outlinelevel1\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32{\listtext\pard\plain \tab}\ls1 \li576\ri0\lin576\rin0\fi-576\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{\rtlch \ltrch\loch\lang2057
3  Erlang and OTP Design Principles}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
Erlang [Armstrong, 2007a, 2007b] is a dynamically typed functional programming language originally designed at the Ericsson Computer Science Laboratory for implementing telephony applications [Armstrong, 2007a]. After using the Erlang language for in-house applications for ten years, when Erlang was released as open source in 1998, Erlang developers summarised five design principles shipped with the Erlang/OTP library, which stands for Erlang Open Telecom Platform [Armstrong, 2007a; Ericsson AB., 2013c].}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Erlang, collaborates with other languages, provides fault-tolerant support for enterprise-level distributed real-time applications. One of the early OTP applications, Ericsson\u226\'e2\u8364\'ac\u8482\'22s AXD 301 switch, is reported to have achieved nine 9s availability, that is 99.9999999% of uptime, during the nine-month experiment [Armstrong, 2002]. Up to the present, Erlang has been widely used in database systems (e.g. Mnesia, Riak, and Amazon SimpleDB) and messaging services (e.g. RabbitMQ and WhatsApp).}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Based on 10 years of experience of using Erlang in Enterprise level applications, Erlang developers summarized 5 OTP design principles in 1999 to improve the reliability of Erlang applications [Ericsson AB., 2013c]: The Behaviour Principle, The Application Principle, The Release Principle, The Release Handling Principle, and The Supervision Principle. The Supervision Principle has been introduced in the previous section. This section describes the idea of the remaining 4 OTP design principles and the methodology of applying them in a JVM based environment, such as Java and Scala. The Supervision principle, which is the central topic of this thesis, has no direct correspondence in general Java and Scala programming practice.}
\par \pard\plain \s3\ilvl2\outlinelevel2\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32{\listtext\pard\plain \tab}\ls1 \li720\ri0\lin720\rin0\fi-720\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{\rtlch \ltrch\loch\lang2057
3.1  The Behaviour Principle}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
A Behaviour in Erlang is similar to an interface, a trait, or an abstract class in the objected oriented programming. It implements common structures and patterns of process implementations. With the help of behaviours, Erlang code can be divided into a generic part, a behaviour module, and a specific part, a callback module. Most processes, including the supervisor in Section }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Merlang_supervision \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
, is coded by implementing a set of pre-defined callback functions for one or more behaviours. Although ad-hoc code and programming structures may be more efficient, using consistent general interfaces make code more maintainable and reliable. Standard Erlang/OTP behaviours include: }
\par \pard\plain \s21\ql\widctlpar\tx566\li283\ri0\lin283\rin0\fi-283\sb0\sa120\ltrpar\dbch\af8\dbch\af10\afs24\loch\f5\fs20\sl100\slmult0\li600\ri0\lin600\rin0\fi-300{\rtlch \ltrch\fs24\lang2057
\u8226\'22}{\rtlch \ltrch\loch\fs24\lang2057
\tab  for constructing the server of a client\-server paradigm. }
\par \pard\plain \s21\ql\widctlpar\tx566\li283\ri0\lin283\rin0\fi-283\sb0\sa120\ltrpar\dbch\af8\dbch\af10\afs24\loch\f5\fs20\sl100\slmult0\li600\ri0\lin600\rin0\fi-300{\rtlch \ltrch\fs24\lang2057
\u8226\'22}{\rtlch \ltrch\loch\fs24\lang2057
\tab  for constructing finite state machines. }
\par \pard\plain \s21\ql\widctlpar\tx566\li283\ri0\lin283\rin0\fi-283\sb0\sa120\ltrpar\dbch\af8\dbch\af10\afs24\loch\f5\fs20\sl100\slmult0\li600\ri0\lin600\rin0\fi-300{\rtlch \ltrch\fs24\lang2057
\u8226\'22}{\rtlch \ltrch\loch\fs24\lang2057
\tab  for implementing event handling functionality. }
\par \pard\plain \s21\ql\widctlpar\tx566\li283\ri0\lin283\rin0\fi-283\sb0\sa120\ltrpar\dbch\af8\dbch\af10\afs24\loch\f5\fs20\sl100\slmult0\li600\ri0\lin600\rin0\fi-300{\rtlch \ltrch\fs24\lang2057
\u8226\'22}{\rtlch \ltrch\loch\fs24\lang2057
\tab }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\fs24\lang2057
supervisor}{\rtlch \ltrch\loch\fs24\lang2057
 for implementing a supervisor in a supervision tree. }
\par \pard\plain \s3\ilvl2\outlinelevel2\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32{\listtext\pard\plain \tab}\ls1 \li720\ri0\lin720\rin0\fi-720\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{\rtlch \ltrch\loch\lang2057
3.2  The Application Principle}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
A software system on the OTP platform is made of a group of components called applications. To define an application, users implements two callback functions of the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
application}{\rtlch \ltrch\loch\lang2057
 behaviour: }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
start/2}{\rtlch \ltrch\loch\lang2057
 and }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
stop/1}{\rtlch \ltrch\loch\lang2057
. Applications without any processes are called library applications. In an Erlang runtime system, all operations on applications are managed by the }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
application controller}{\rtlch \ltrch\loch\lang2057
 process, registered as }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
application_controller}{\rtlch \ltrch\loch\lang2057
.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Distributed applications may be deployed on several distributed Erlang nodes. An Erlang distributed application will be restarted at another node when its current node goes down. A distributed application is controlled by both the application controller and the distributed application controller, registered as }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
dist_ac}{\rtlch \ltrch\loch\lang2057
, both of which are part of the }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
kernel}{\rtlch \ltrch\loch\lang2057
 application. Two configuration parameters must be set before loading and launching a distributed application. First, possible nodes where the distributed application may run must be explicitly pointed. Second, all nodes configured in the last step will be sent a copy of the same configuration which include three parameters: the time for other nodes to start, nodes that }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
 must}{\rtlch \ltrch\loch\lang2057
 be started in a given time, and nodes that }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
may}{\rtlch \ltrch\loch\lang2057
 be started in a given time.}
\par \pard\plain \s3\ilvl2\outlinelevel2\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32{\listtext\pard\plain \tab}\ls1 \li720\ri0\lin720\rin0\fi-720\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{\rtlch \ltrch\loch\lang2057
3.3  The Release Principle and The Release Handling Principle}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
A complete Erlang system consists of one or more applications, packaged in a release resource file. Different version of a release can be upgraded or downgraded at run-time dynamically by calling APIs in the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
release_handler}{\rtlch \ltrch\loch\lang2057
 module in the SASL (System Architecture Support Libraries) application. Hot swapping on an entire release application is a distinct feature of Erlang/OTP, which aims at designing and running non-stop applications.}
\par \pard\plain \s3\ilvl2\outlinelevel2\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32{\listtext\pard\plain \tab}\ls1 \li720\ri0\lin720\rin0\fi-720\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{\rtlch \ltrch\loch\lang2057
3.4  Appling OTP Design Principles in Java and Scala}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
To sum, we make an analogy between Erlang/OTP design principles and common practices in Java and Scala programming, summarised in Table }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Motp \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
. }
\par \pard\plain \s41\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\fs24\lang2057
 }
\par \trowd\trql\trleft0\ltrrow\trpaddft3\trpaddt0\trpaddfl3\trpaddl0\trpaddfb3\trpaddb0\trpaddfr3\trpaddr0\cellx1209\cellx6899\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\fs24\lang2057
 }{\rtlch \ltrch\loch\fs24\lang2057
OTP Design Principle}\cell\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\loch\fs24\lang2057
Java/Scala Analogy}\cell\row\pard\trowd\trql\trleft0\ltrrow\trpaddft3\trpaddt0\trpaddfl3\trpaddl0\trpaddfb3\trpaddb0\trpaddfr3\trpaddr0\cellx1209\cellx6899\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\fs24\lang2057
 }{\rtlch \ltrch\loch\fs24\lang2057
Behaviour}\cell\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\loch\fs24\lang2057
defining an abstract class, an interface, or a trait.}\cell\row\pard\trowd\trql\trleft0\ltrrow\trpaddft3\trpaddt0\trpaddfl3\trpaddl0\trpaddfb3\trpaddb0\trpaddfr3\trpaddr0\cellx1209\cellx6899\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\fs24\lang2057
 }{\rtlch \ltrch\loch\fs24\lang2057
Application}\cell\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\loch\fs24\lang2057
defining an abstract class that has two abstract methods: start and stop}\cell\row\pard\trowd\trql\trleft0\ltrrow\trpaddft3\trpaddt0\trpaddfl3\trpaddl0\trpaddfb3\trpaddb0\trpaddfr3\trpaddr0\cellx1209\cellx6899\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\fs24\lang2057
 }{\rtlch \ltrch\loch\fs24\lang2057
Release}\cell\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\loch\fs24\lang2057
packaging related application classes}\cell\row\pard\trowd\trql\trleft0\ltrrow\trpaddft3\trpaddt0\trpaddfl3\trpaddl0\trpaddfb3\trpaddb0\trpaddfr3\trpaddr0\cellx1209\cellx6899\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\fs24\lang2057
 }{\rtlch \ltrch\loch\fs24\lang2057
Release Handling}\cell\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\loch\fs24\lang2057
hot swapping support on key modules is required}\cell\row\pard\trowd\trql\trleft0\ltrrow\trpaddft3\trpaddt0\trpaddfl3\trpaddl0\trpaddfb3\trpaddb0\trpaddfr3\trpaddr0\cellx1209\cellx6899\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\fs24\lang2057
 }{\rtlch \ltrch\loch\fs24\lang2057
Supervision}\cell\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\loch\fs24\lang2057
no direct correspondence}\cell\row\pard\pard\plain \s41\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\fs24\lang2057
 }
\par \pard\plain \s39\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
Table }{{\*\bkmkstart BMotp}\rtlch \ltrch\loch\lang2057
1}{{\*\bkmkend BMotp}\rtlch \ltrch\loch\lang2057
: Using OTP Design Principles in JAVA and Scala Programming}{\rtlch \ltrch\loch\lang2057
}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360\sb240\sa0{\rtlch \ltrch\loch\lang2057
First, the notion of callback functions in Erlang/OTP is close to the notion of abstract methods in Java and Scala. An OTP behaviour that only defines the signature of callback functions can be ported to Java and Scala as an interface. An OTP behaviour that implements some behaviour functions can be ported as an abstract class to }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
prevent}{\rtlch \ltrch\loch\lang2057
 multiple inheritance, or a trait to }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
permit}{\rtlch \ltrch\loch\lang2057
 multiple inheritance. Since Java does not have the notion of trait, porting an Erlang/OTP module that implements multiple behaviours requires a certain amount of refactoring work.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Second, since the Erlang application module is just a special behaviour, we can define an equivalent interface }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Application}{\rtlch \ltrch\loch\lang2057
 which contains two abstract methods: }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
start}{\rtlch \ltrch\loch\lang2057
 and }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
stop}{\rtlch \ltrch\loch\lang2057
. To mimic the dynamic type system of Erlang system, the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
start}{\rtlch \ltrch\loch\lang2057
 method may be declared as }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
public static void start(String name, Object... arguments)}{\rtlch \ltrch\loch\lang2057
 and as }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
def start(name:String, arguments:Any*):Unit}{\rtlch \ltrch\loch\lang2057
 in Java and Scala respectively. }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Third, Erlang releases correspond to packages in Java and Scala whereas hot code swapping is not directly supported by JVM. During the development of the TAkka library, we noticed that hot code swapping on a key component can be mimicked by updating the reference to that component.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
The final OTP design principle, Supervision, has no direct correspondence in Java and Scala programming practices. The next section introduces the Akka library which implements the supervision principle.}
\par \pard\plain \s2\ilvl1\outlinelevel1\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32{\listtext\pard\plain \tab}\ls1 \li576\ri0\lin576\rin0\fi-576\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{\rtlch \ltrch\loch\lang2057
4  The Akka Library}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
Akka is the first library that makes supervision obligatory. The API of the Akka library [Typesafe Inc. (a), 2012; Typesafe Inc. (b), 2012] is similar to the Scala Actor library [Haller and Odersky, 2006, 2007], which borrows syntax from the Erlang languages [Armstrong, 2007b; Ericsson AB., 2013b]. Both Akka and Scala Actor are built in Scala, a typed language that merges features from Object-Oriented Programming and Functional Programming. This section gives a brief tutorial on Akka, based on related materials in the Akka Documentation [Typesafe Inc. (b), 2012].}
\par \pard\plain \s3\ilvl2\outlinelevel2\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32{\listtext\pard\plain \tab}\ls1 \li720\ri0\lin720\rin0\fi-720\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{{\*\bkmkstart BMsubsection_actor_akka}\rtlch \ltrch\loch\lang2057
4.1}{{\*\bkmkend BMsubsection_actor_akka}\rtlch \ltrch\loch\lang2057
  Actor Programming in Akka}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
(This section summarises material from [Typesafe Inc. (b), 2012, Section 2.3 and 3.1]) }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Although many Akka designs have their origin in Erlang, the Akka Team at Typesafe Inc. devises a set of connected concepts that explains Actor programming in the Akka framework. This subsection begins with a short Akka example, followed by elaborate explanations of involved concepts.}
\par \pard\plain \s40\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\fs24\lang2057
 }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s39\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
Figure }{{\*\bkmkstart BMfig_akka_string_counter}\rtlch \ltrch\loch\lang2057
1}{{\*\bkmkend BMfig_akka_string_counter}\rtlch \ltrch\loch\lang2057
: Akka Example: A String Counter}{\rtlch \ltrch\loch\lang2057
}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360\sb240\sa0{\rtlch \ltrch\loch\lang2057
The code presented in Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mfig_akka_string_counter \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
 defines and uses an actor which counts String messages it receives. An Akka actor implements its message handler by defining a }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
receive}{\rtlch \ltrch\loch\lang2057
 method of type }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
PartialFunction[Any, Unit]}{\rtlch \ltrch\loch\lang2057
. In Scala, }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Any}{\rtlch \ltrch\loch\lang2057
 is the supertype of all types. The type }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Unit}{\rtlch \ltrch\loch\lang2057
 has a unique value. A method with the return type }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Unit}{\rtlch \ltrch\loch\lang2057
, such as the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
receive}{\rtlch \ltrch\loch\lang2057
 method, represents a block of local actions. An analogous to such method is a Java method which is declared }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
void}{\rtlch \ltrch\loch\lang2057
. In the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
StringCounterTest}{\rtlch \ltrch\loch\lang2057
 application, we create an Actor System (Section }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Makka_actor_system \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
), initialise an actor (Section }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Makka_actor_class \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
) inside the Actor System by passing a corresponding }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Props}{\rtlch \ltrch\loch\lang2057
 (Section }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Makka_props \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
), and send messages to the created actor via its actor references (Section }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Makka_actor_reference \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
). Unexpected messages to the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
counter}{\rtlch \ltrch\loch\lang2057
 actor (e.g. line 28 and 31) are handled by an instance of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
MessageHandler}{\rtlch \ltrch\loch\lang2057
, a helper actor for the test application. Lastly, the order in which the four output messages are printed is non-deterministic, but \u8220\'1cHello World\u8221\'1d is always printed before \u8220\'1cHello World Again\u8221\'1d and \u8220\'1cunhandled message:1\u8221\'1d is always printed before \u8220\'1cunhandled message:2\u8221\'1d. }
\par \pard\plain \s4\ilvl3\outlinelevel3\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24{\listtext\pard\plain \tab}\ls1 \li864\ri0\lin864\rin0\fi-864\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{{\*\bkmkstart BMakka_actor_system}\rtlch \ltrch\loch\lang2057
4.1.1}{{\*\bkmkend BMakka_actor_system}\rtlch \ltrch\loch\lang2057
  Actor System}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
In Akka, every actor is resident in an Actor System. An actor system organises related actors in a tree structure and provides services such as thread scheduling, network connection, and logging. One or several local and remote actor systems consist a complete application. }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
To create an actor system, users provide a name and an optional configuration to the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
ActorSystem}{\rtlch \ltrch\loch\lang2057
 constructor. For example, an actor system is created in Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mfig_akka_string_counter \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
 by the following code. }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
In the above, an actor system of name StringCounterTest is created at the machine where the program runs. The above created actor system uses the default Akka system configuration which provides a simple logging service, a round-robin style message router, but does not support remote messages. Customized configuration can be encapsulated in a }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Config}{\rtlch \ltrch\loch\lang2057
 instance and passed to the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
ActorSystem}{\rtlch \ltrch\loch\lang2057
 constructor, or specified as part of the application configuration file. This short tutorial will not look into customized configurations, which have minor differences in different Akka versions, and are not related to our central topics.}
\par \pard\plain \s4\ilvl3\outlinelevel3\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24{\listtext\pard\plain \tab}\ls1 \li864\ri0\lin864\rin0\fi-864\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{{\*\bkmkstart BMakka_actor_class}\rtlch \ltrch\loch\lang2057
4.1.2}{{\*\bkmkend BMakka_actor_class}\rtlch \ltrch\loch\lang2057
  The Actor Class}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
An Akka Actor has four groups of fields given in Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Makka_actor_api \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
: [}{\scaps0\caps0\i\rtlch \ltrch\loch\lang2057
i}{\scaps0\caps0\i0\rtlch \ltrch\loch\lang2057
)] 1. its }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
state}{\scaps0\caps0\i0\rtlch \ltrch\loch\lang2057
, 2. its }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
behaviour}{\scaps0\caps0\i0\rtlch \ltrch\loch\lang2057
 functions, 3. an }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
ActorContext}{\scaps0\caps0\i0\rtlch \ltrch\loch\lang2057
 instance encapsulating its contextual information, and 4. the }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
supervisor strategy}{\scaps0\caps0\i0\rtlch \ltrch\loch\lang2057
 for its children. }{\rtlch \ltrch\loch\lang2057
 This subsection explains the }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
state}{\rtlch \ltrch\loch\lang2057
 and }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
behaviour}{\rtlch \ltrch\loch\lang2057
 of actors, which are required when defining an Actor class. Overriding default }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
actor context}{\rtlch \ltrch\loch\lang2057
 and }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
supervisor strategy}{\rtlch \ltrch\loch\lang2057
 will be explained in later subsections.}
\par \pard\plain \s40\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\fs24\lang2057
 }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s39\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
Figure }{{\*\bkmkstart BMakka_actor_api}\rtlch \ltrch\loch\lang2057
2}{{\*\bkmkend BMakka_actor_api}\rtlch \ltrch\loch\lang2057
: Akka API: Actor}{\rtlch \ltrch\loch\lang2057
}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360\sb240\sa0{\rtlch \ltrch\loch\lang2057
An Akka actor may contain some mutable variables and immutable values that represent its }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
internal state}{\rtlch \ltrch\loch\lang2057
. Each Akka actor has an actor reference, }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
self}{\rtlch \ltrch\loch\lang2057
, to which messages can be sent to that actor. The value of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 self}{\rtlch \ltrch\loch\lang2057
 is initialised when the actor is created. Notice that }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
self}{\rtlch \ltrch\loch\lang2057
 is declared as a value field (}{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
val}{\rtlch \ltrch\loch\lang2057
), rather than a variable field (}{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 var}{\rtlch \ltrch\loch\lang2057
), so that its value cannot be changed. In addition to }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
immutable states}{\rtlch \ltrch\loch\lang2057
, sometimes }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
mutable states}{\rtlch \ltrch\loch\lang2057
 are also required. For example, Akka developers believe that the sender of the last message shall be recorded and easily fetched by calling the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
sender}{\rtlch \ltrch\loch\lang2057
 method. In the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
StringCounter}{\rtlch \ltrch\loch\lang2057
 example, we straightforwardly add a }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
counter}{\rtlch \ltrch\loch\lang2057
 variable which is initialized to 0 and is incremented each time when a String message is processed.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
There are two drawbacks of using mutable internal variables to represent states. Firstly, those variables will be reset each time when the actor is restarted, either due to a failure caused by itself or be enforced by its supervisor for other reasons. Secondly, mutable internal variables result in the difficulty of implementing a consistent cluster environment where actors may be replicated to increase reliability [Kuhn et\~al., 2012]. The alternatives of working with mutable states will be discussed in Section }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Malternative_designs \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
There are two kinds of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
behaviour}{\rtlch \ltrch\loch\lang2057
 functions of an actor. The first type of behaviour functions is a }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
receive}{\rtlch \ltrch\loch\lang2057
 function which defines its action to incoming messages. The }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
receive}{\rtlch \ltrch\loch\lang2057
 function is declared as an }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
abstract}{\rtlch \ltrch\loch\lang2057
 function, which must be implemented otherwise the class cannot be initialised. The second group of behaviour functions has four overridable functions which are triggered before the actor is started (}{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
preStart}{\rtlch \ltrch\loch\lang2057
), before the actor is restarted (}{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
preRestart}{\rtlch \ltrch\loch\lang2057
), after the actor is restarted (}{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
postRestart}{\rtlch \ltrch\loch\lang2057
), and when the actor is permanently terminated (}{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
postStop}{\rtlch \ltrch\loch\lang2057
). The default implementation of those four functions take no action when they are invoked.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Look closely at the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
receive}{\rtlch \ltrch\loch\lang2057
 function of the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
StringCounter}{\rtlch \ltrch\loch\lang2057
 actor in Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mfig_akka_string_counter \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
, it actually has type }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 Function[String, Unit]}{\rtlch \ltrch\loch\lang2057
 rather than the declared type }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
PartialFunction[Any, Unit]}{\rtlch \ltrch\loch\lang2057
. The definition of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
StringCounter}{\rtlch \ltrch\loch\lang2057
 is accepted by the Scala compiler because }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
PartialFunction}{\rtlch \ltrch\loch\lang2057
 does not check the completeness of the input patterns. The behaviour of processing non-String messages, however, is undefined in the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
receive}{\rtlch \ltrch\loch\lang2057
 method.}
\par \pard\plain \s4\ilvl3\outlinelevel3\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24{\listtext\pard\plain \tab}\ls1 \li864\ri0\lin864\rin0\fi-864\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{{\*\bkmkstart BMmessagemailbox}\rtlch \ltrch\loch\lang2057
4.1.3}{{\*\bkmkend BMmessagemailbox}\rtlch \ltrch\loch\lang2057
  Message Mailbox}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
An actor receives messages from other parts of the application. Arrived messages are queued in its sole mailbox to be processed. Different from the Erlang design (Section }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Merlang_message_passing \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
), the behaviour function of an Akka actor must be able to process the message it is given. If the message does not match any message pattern of the current behaviour, a failure arises.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Undefined messages are treated differently in different Akka versions. In versions prior to 2.0, an Akka actor raises an exception when it processes an undefined message. It means that sending an ill-typed message will cause a failure at the receiver side. In Akka 2.1, an undefined message is discarded by the actor and an }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
UnhandledMessage}{\rtlch \ltrch\loch\lang2057
 event is pushed to the event stream of the actor system. The event stream may be subscribed by other actors who are interested in particular event messages. Line 24 of the String Counter example demonstrates how to subscribe messages in the event stream of an actor system.}
\par \pard\plain \s4\ilvl3\outlinelevel3\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24{\listtext\pard\plain \tab}\ls1 \li864\ri0\lin864\rin0\fi-864\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{{\*\bkmkstart BMakka_props}\rtlch \ltrch\loch\lang2057
4.1.4}{{\*\bkmkend BMakka_props}\rtlch \ltrch\loch\lang2057
  Actor Creation with Props}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
An instance of the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Props}{\rtlch \ltrch\loch\lang2057
 class, which perhaps stands for \u8220\'1cproperties\u8221\'1d, specifies the configuration of creating an actor. A }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Props}{\rtlch \ltrch\loch\lang2057
 instance is immutable so that it can be consistently shared between threads and distributed nodes. }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Makka_props_api \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
 gives part of the APIs of the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Props}{\rtlch \ltrch\loch\lang2057
 class and its companion object. The }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Props}{\rtlch \ltrch\loch\lang2057
 class is defined as a }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
final class}{\rtlch \ltrch\loch\lang2057
 so that users cannot define subclasses of it. Moreover, users are not encouraged to initialise a }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Props}{\rtlch \ltrch\loch\lang2057
 instance by directly using its constructor. Instead, a }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Props}{\rtlch \ltrch\loch\lang2057
 should be initialised by using one of the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
apply}{\rtlch \ltrch\loch\lang2057
 methods supplied by the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Props}{\rtlch \ltrch\loch\lang2057
 object. From the perspective of software design patterns, the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Props}{\rtlch \ltrch\loch\lang2057
 object is a }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
Factory}{\rtlch \ltrch\loch\lang2057
 for creating instances of the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Props}{\rtlch \ltrch\loch\lang2057
 class.}
\par \pard\plain \s40\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\fs24\lang2057
 }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s39\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
Figure }{{\*\bkmkstart BMakka_props_api}\rtlch \ltrch\loch\lang2057
3}{{\*\bkmkend BMakka_props_api}\rtlch \ltrch\loch\lang2057
: Akka API: Props}{\rtlch \ltrch\loch\lang2057
}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360\sb240\sa0{\rtlch \ltrch\loch\lang2057
We have seen an example of creating a }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Props}{\rtlch \ltrch\loch\lang2057
 instance in Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mfig_akka_string_counter \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
, that is:}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
which is short for }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
The APIs of the first }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Props.apply}{\rtlch \ltrch\loch\lang2057
 method is carefully designed to take the advantages of the Scala language. Firstly, the word }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
apply}{\rtlch \ltrch\loch\lang2057
 can be omitted when it is used as a method name. Secondly, round brackets can be omitted when a method does not take any argument. Thirdly, implicit parameters are automatically provided if implicit values of the right types can be found in scope. As a result, in most cases, only the class name of an Actor is required when creating a }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Props}{\rtlch \ltrch\loch\lang2057
 of that actor.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Alternatively, calling the second }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
apply}{\rtlch \ltrch\loch\lang2057
 method requires a }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
class object}{\rtlch \ltrch\loch\lang2057
 and arguments sending to the class constructor. For example, the above }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Props}{\rtlch \ltrch\loch\lang2057
 can be alternatively created by the following code: }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
In the above, the predefined function }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
classOf[T]}{\rtlch \ltrch\loch\lang2057
 returns a class object for type }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
T}{\rtlch \ltrch\loch\lang2057
. More arguments can be sent to the constructor of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
StringCounter}{\rtlch \ltrch\loch\lang2057
 if there is one that requires more parameters. The signature of the constructor, including the number, types and order of its parameters, is verified at the run time. If no matched constructor is found when initializing the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Props}{\rtlch \ltrch\loch\lang2057
 object, an }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 IllegalArgumentException}{\rtlch \ltrch\loch\lang2057
 will arise.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Once an instance of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Props}{\rtlch \ltrch\loch\lang2057
 is created, an actor can be created by passing that }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Props}{\rtlch \ltrch\loch\lang2057
 instance to the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
actorOf}{\rtlch \ltrch\loch\lang2057
 method of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
ActorSystem}{\rtlch \ltrch\loch\lang2057
 or }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
ActorContext}{\rtlch \ltrch\loch\lang2057
. In Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mfig_akka_string_counter \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
, we have seen that }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
system.actorOf}{\rtlch \ltrch\loch\lang2057
 creates an actor directly supervised by the system guidance actor for all user-created actors (}{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
user}{\rtlch \ltrch\loch\lang2057
). Calling }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 context.actorOf}{\rtlch \ltrch\loch\lang2057
 creates an actor supervised by the actor represented by that context. Details of actor context and supervision will be given in Section }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Makka_actor_context \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
 and Section }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Makka_supervision \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
 respectively.}
\par \pard\plain \s4\ilvl3\outlinelevel3\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24{\listtext\pard\plain \tab}\ls1 \li864\ri0\lin864\rin0\fi-864\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{{\*\bkmkstart BMakka_actor_reference}\rtlch \ltrch\loch\lang2057
4.1.5}{{\*\bkmkend BMakka_actor_reference}\rtlch \ltrch\loch\lang2057
  Actor Reference and Actor Path}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
Actors collaborate by sending messages to each other via actor references of message receivers. An actor reference has type }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
ActorRef}{\rtlch \ltrch\loch\lang2057
, which provides a }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
! }{\rtlch \ltrch\loch\lang2057
 method to which messages are sent. For example, in the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
StringCounter}{\rtlch \ltrch\loch\lang2057
 example in Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mfig_akka_string_counter \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
, }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 counter}{\rtlch \ltrch\loch\lang2057
 is an actor reference to which the message }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 "Hello world"}{\rtlch \ltrch\loch\lang2057
 is sent by the following code: }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
which is the syntactic sugar for }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s40\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\fs24\lang2057
 }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s39\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
Figure }{{\*\bkmkstart BMakka_actor_reference_api}\rtlch \ltrch\loch\lang2057
4}{{\*\bkmkend BMakka_actor_reference_api}\rtlch \ltrch\loch\lang2057
: Akka API: Actor Reference}{\rtlch \ltrch\loch\lang2057
}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360\sb240\sa0{\rtlch \ltrch\loch\lang2057
An actor path is a symbolic representation of the address where an actor can be located. Since actors forms a tree hierarchy in Akka, a unique address can be allocated for each actor by appending an actor name, which shall not be conflict with its siblings, to the address of its parent. Examples of Akka addresses are:}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
The first address represents the path to a local actor. Inspired by the syntax of uniform resource identifier (URI), an actor address consists of a scheme name (}{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
akka}{\rtlch \ltrch\loch\lang2057
), actor system name (e.g. }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
mysystem}{\rtlch \ltrch\loch\lang2057
), and names of actors from the guardian actor (}{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
user}{\rtlch \ltrch\loch\lang2057
) to the respected actor (e.g. }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 service, worker}{\rtlch \ltrch\loch\lang2057
). The second address represents the path to a remote actor. In addition to components of a local address, a remote address further specifies the communication protocol (}{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
tcp}{\rtlch \ltrch\loch\lang2057
 or }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
udp}{\rtlch \ltrch\loch\lang2057
), the IP address or domain name (e.g. }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
example.com}{\rtlch \ltrch\loch\lang2057
), and the port number (e.g. }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
1234}{\rtlch \ltrch\loch\lang2057
) used by the actor system to receive messages. The third address represents the desired format of a path to an actor in a cluster environment in a further Akka version. In the design, protocol, IP/domain name, and port number are omitted in the address of an actor which may transmit around the cluster or have multiple copies.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
An actor path corresponds to an address where an actor can be identified. It can be initialized without the creation of an actor. Moreover, an actor path can be re-used by a new actor after the termination of an old actor. Two actor paths are considered equivalent as long as their symbolic representations are equivalent strings. On the contrary, an actor reference must correspond to an existing actor, either an alive actor located at the corresponding actor path, or the special }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
DeadLetter}{\rtlch \ltrch\loch\lang2057
 actor which receives messages sent to terminated actors. Two actor references are equivalent if they correspond to the same actor path and the same actor. A restarted actor is considered as the same actor as the one before the restart because the life cycle of an actor is not visible to the users of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
ActorRef}{\rtlch \ltrch\loch\lang2057
.}
\par \pard\plain \s4\ilvl3\outlinelevel3\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24{\listtext\pard\plain \tab}\ls1 \li864\ri0\lin864\rin0\fi-864\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{{\*\bkmkstart BMakka_actor_context}\rtlch \ltrch\loch\lang2057
4.1.6}{{\*\bkmkend BMakka_actor_context}\rtlch \ltrch\loch\lang2057
  Actor Context}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
The }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
ActorContext}{\rtlch \ltrch\loch\lang2057
 class has been mention a few times in previous sections. This section explains what the contextual information of an Akka actor includes, with a reference to the following APIs cited from [Typesafe Inc. (a), 2012].}
\par \pard\plain \s40\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\fs24\lang2057
 }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s39\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
Figure }{{\*\bkmkstart BMakka_actor_context_api}\rtlch \ltrch\loch\lang2057
5}{{\*\bkmkend BMakka_actor_context_api}\rtlch \ltrch\loch\lang2057
: Akka API: Actor Context}{\rtlch \ltrch\loch\lang2057
}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360\sb240\sa0{\rtlch \ltrch\loch\lang2057
The API in Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Makka_actor_context_api \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
 shows two groups of methods: those for interacting with other actors (line 3 to line 24), and those for controlling the behaviour of the represented actor (line 26 to line 30). }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
As mentioned in Section }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Makka_props \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
, calling the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
context.actorOf}{\rtlch \ltrch\loch\lang2057
 method creates a child actor supervised by the actor represented by that context. Every actor has a name distinguished from its siblings. If a user assigned name is conflict with the name of another existed actor, an }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 InvalidActorNameException}{\rtlch \ltrch\loch\lang2057
 raises. If the user does not provide a name when creating an actor, a system generated name will be used instead. The return value of the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
actorOf}{\rtlch \ltrch\loch\lang2057
 method is an actor reference pointing to the created actor.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Once an actor is created, its actor reference can be obtained by inquiring on its actor path using the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
actorFor}{\rtlch \ltrch\loch\lang2057
 method. Since version 2.1, Akka encourages obtaining actor references via a new method }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
actorSelection}{\rtlch \ltrch\loch\lang2057
, whose return value broadcasts messages it receives to all actors in its subtrees. The }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
actorFor}{\rtlch \ltrch\loch\lang2057
 method is deprecated in version 2.2. Code in this thesis still uses the deprecated }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
actorFor}{\rtlch \ltrch\loch\lang2057
 method because, in most cases, our simple examples only need to send messages to a specific group of actor.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Actor context is also used to fetch some states inside the actor. For example, the context of an actor records references to its parent and children, the props used to create that actor, actor references to itself and the sender of the last message, and the actor system where the actor is resident in.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Ported from the Erlang design, using the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
watch}{\rtlch \ltrch\loch\lang2057
 method, an Akka actor can monitor the liveness of another actor, which is not necessarily its child. The liveness monitoring can be cancelled by calling the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
unwatch}{\rtlch \ltrch\loch\lang2057
 method. Another method ported from Erlang is the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
stop}{\rtlch \ltrch\loch\lang2057
 method which sends a termination signal to an actor. Since supervision is obligatory in Akka and users are encouraged to managing the lifecycle of an actor either inside the actor or via its supervisor, we believe that those three methods are redundant in Akka. For all examples studied in this thesis, there is no client application that requires any of those three methods.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Finally, actor context manages two behaviours of the actor it represents. The first behaviour specified by the actor context is the timeout within which a new message shall be received or a }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
ReceiveTimeout}{\rtlch \ltrch\loch\lang2057
 message is sent to the actor. The second behaviour managed by the actor context is the handler for incoming messages. The next subsection explains how to hot swap the message handler of an actor using the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
become}{\rtlch \ltrch\loch\lang2057
 and }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
unbecome}{\rtlch \ltrch\loch\lang2057
 method.}
\par \pard\plain \s4\ilvl3\outlinelevel3\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24{\listtext\pard\plain \tab}\ls1 \li864\ri0\lin864\rin0\fi-864\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{{\*\bkmkstart BMakka_hot_swap}\rtlch \ltrch\loch\lang2057
4.1.7}{{\*\bkmkend BMakka_hot_swap}\rtlch \ltrch\loch\lang2057
  Dynamic Behaviour Swapping}
\par \pard\plain \s40\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\fs24\lang2057
 }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s39\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
Figure }{{\*\bkmkstart BMfig_akka_swap}\rtlch \ltrch\loch\lang2057
6}{{\*\bkmkend BMfig_akka_swap}\rtlch \ltrch\loch\lang2057
: Akka Behaviour Swap Example}{\rtlch \ltrch\loch\lang2057
}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360\sb240\sa0{\rtlch \ltrch\loch\lang2057
In the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
StringCounter}{\rtlch \ltrch\loch\lang2057
 example given at the beginning of this section, a message handler is defined in the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
receive}{\rtlch \ltrch\loch\lang2057
 method. The }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 StringCounter}{\rtlch \ltrch\loch\lang2057
 is a simple actor which only requires an initial message handler that never changes. In some other cases, it is required to update the message handler of an actor at runtime.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Message handlers of an Akka actor are kept in a stack of its }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
context}{\rtlch \ltrch\loch\lang2057
. A message handler is pushed to the stack when the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
context.become}{\rtlch \ltrch\loch\lang2057
 method is called; and is popped out from the stack when the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
context.unbecome}{\rtlch \ltrch\loch\lang2057
 method is called. The message handler of an actor is reset to the initial one, i.e. the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
receive}{\rtlch \ltrch\loch\lang2057
 method, when it is restarted.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mfig_akka_swap \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
 defines a calculator whose behaviour changes at run-time. The calculator starts with a basic version that can only compute multiplication. When it receives an }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 Upgrade}{\rtlch \ltrch\loch\lang2057
 command, it upgrades to an advanced version that can compute both multiplication and division. The advanced calculator downgrades to the basic version when it receives a }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Downgrade}{\rtlch \ltrch\loch\lang2057
 command. For simplicity, the demo code does not consider the potential }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
division by zero}{\rtlch \ltrch\loch\lang2057
 problem, an error that can be tolerated if the actor is properly supervised.}
\par \pard\plain \s3\ilvl2\outlinelevel2\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32{\listtext\pard\plain \tab}\ls1 \li720\ri0\lin720\rin0\fi-720\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{{\*\bkmkstart BMakka_supervision}\rtlch \ltrch\loch\lang2057
4.2}{{\*\bkmkend BMakka_supervision}\rtlch \ltrch\loch\lang2057
  Supervision in Akka}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
(This section summarises material from [Typesafe Inc. (b), 2012, Section 2.4 and 3.4]) }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
A distinguishing feature of the Akka library is making supervision obligatory by restricting the way of creating actors. Recall that every user-created actor is initialised in one of the two ways: using the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
system.actorOf}{\rtlch \ltrch\loch\lang2057
 method so that it is a child of the system guardian actor; or using the context.actorOf method so that it is a child of another user-created actor. Therefore, all user-created actors in an actor system, together with the guardian actor of that actor system, form a tree structure. Obligatory supervision unifies the structure of actor deployment and simplifies the work of system maintenance. This section summarises concepts in the Akka supervision tree.}
\par \pard\plain \s4\ilvl3\outlinelevel3\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24{\listtext\pard\plain \tab}\ls1 \li864\ri0\lin864\rin0\fi-864\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{\rtlch \ltrch\loch\lang2057
4.2.1  Children}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
Every actor in Akka is a supervisor for a list of other actors. An actor creates a new child by calling }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
context.actorOf}{\rtlch \ltrch\loch\lang2057
 and removes a child by calling }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
context.stop(child)}{\rtlch \ltrch\loch\lang2057
, where }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
child}{\rtlch \ltrch\loch\lang2057
 is an actor reference.}
\par \pard\plain \s4\ilvl3\outlinelevel3\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24{\listtext\pard\plain \tab}\ls1 \li864\ri0\lin864\rin0\fi-864\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{\rtlch \ltrch\loch\lang2057
4.2.2  Supervisor Strategy}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
The Akka library implements two supervisor strategies: }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
OneForOne}{\rtlch \ltrch\loch\lang2057
 and }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
AllForOne}{\rtlch \ltrch\loch\lang2057
. The }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
OneForOne}{\rtlch \ltrch\loch\lang2057
 supervisor strategy corresponds to the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
one_for_one}{\rtlch \ltrch\loch\lang2057
 supervision strategy in OTP, which restart a child when it fails. The }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
AllForOne}{\rtlch \ltrch\loch\lang2057
 supervisor strategy corresponds to the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 one_for_all}{\rtlch \ltrch\loch\lang2057
 supervision strategy in OTP, which restart all children when any of them fails. The }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
rest_for_all}{\rtlch \ltrch\loch\lang2057
 supervision strategy in OTP is not implemented in Akka because Akka actor does not specify the order of children. Simulating the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
rest_for_all}{\rtlch \ltrch\loch\lang2057
 strategy in Akka requires ad-hoc implementation that groups related children and defines special messages to trigger actor termination. It is not clear whether the lack of the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
rest_for_one}{\rtlch \ltrch\loch\lang2057
 strategy will result in difficulties when rewriting Erlang applications in Akka.}
\par \pard\plain \s40\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\fs24\lang2057
 }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s39\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
Figure }{{\*\bkmkstart BMakka_supervisor_strategy}\rtlch \ltrch\loch\lang2057
7}{{\*\bkmkend BMakka_supervisor_strategy}\rtlch \ltrch\loch\lang2057
: Akka API: Supervisor Strategies}{\rtlch \ltrch\loch\lang2057
}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360\sb240\sa0{\rtlch \ltrch\loch\lang2057
Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Makka_supervisor_strategy \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
 gives API of Akk supervisor strategies. As in OTP, for each supervisor strategy, users can specify the maximum number of restarts permitted for its children within a period. The default supervisor strategy in Akka is }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
OneForOne}{\rtlch \ltrch\loch\lang2057
 that permits unlimited restarts. }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
As shown in the API, an Akka supervisor strategy can choose different reactions for different reasons of child failures in its }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
decider}{\rtlch \ltrch\loch\lang2057
 parameter. Recall that }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Throwable}{\rtlch \ltrch\loch\lang2057
 is the superclass of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Error}{\rtlch \ltrch\loch\lang2057
 and }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Exception}{\rtlch \ltrch\loch\lang2057
 in Scala and Java. Therefore, users can pattern match on possible types and values of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Throwable}{\rtlch \ltrch\loch\lang2057
 in the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
decider}{\rtlch \ltrch\loch\lang2057
 function. In other words, when the failure of a child is passed to the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
decider}{\rtlch \ltrch\loch\lang2057
 function of the supervisor, it is matched to a pattern that reacts to that failure.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
The }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
decider}{\rtlch \ltrch\loch\lang2057
 function contains user-specified computations and returns a value of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Directive}{\rtlch \ltrch\loch\lang2057
 that denotes the standard recovery process implemented by the Akka library developers. The }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Directive}{\rtlch \ltrch\loch\lang2057
 trait is an enumerated type that has four possible values: the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Escalate}{\rtlch \ltrch\loch\lang2057
 action which throws the exception to the supervisor of the supervisor, the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Restart}{\rtlch \ltrch\loch\lang2057
 action which replaces the failed child with a new one, the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Resume}{\rtlch \ltrch\loch\lang2057
 action which asks the child to process the message again, and the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Stop}{\rtlch \ltrch\loch\lang2057
 action which terminates the failed actor permanently.}
\par \pard\plain \s3\ilvl2\outlinelevel2\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32{\listtext\pard\plain \tab}\ls1 \li720\ri0\lin720\rin0\fi-720\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{\rtlch \ltrch\loch\lang2057
4.3  Case Study: A Fault-Tolerant Calculator}
\par \pard\plain \s40\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\fs24\lang2057
 }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s39\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
Figure }{{\*\bkmkstart BMakka_supervised_calculator}\rtlch \ltrch\loch\lang2057
8}{{\*\bkmkend BMakka_supervised_calculator}\rtlch \ltrch\loch\lang2057
: Akka Example: Supervised Calculator}{\rtlch \ltrch\loch\lang2057
}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360\sb240\sa0{\rtlch \ltrch\loch\lang2057
Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Makka_supervised_calculator \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
 defines a simple calculator which supports multiplication and division. The simple calculator does not consider the problematic case of dividing a number by 0, in which case an }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
ArithmeticException}{\rtlch \ltrch\loch\lang2057
 will raise. We then define a safe calculator as the supervisor of the simple calculator. The safe calculator delegates calculation tasks to the simple calculator and restart the simple calculator when an }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
ArithmeticException}{\rtlch \ltrch\loch\lang2057
 raises. The supervisor strategy of the safe calculator also specifies the maximum failures its child may have within a time range. If the child fails more frequently than the allowed frequency, the safe calculator will be stopped, and its failure will be reported to its supervisor, the system guardian actor in this example. The terminal output shows that the simple calculator is restarted before the third and fifth message is delivered. The last message is not processed because the both calculators are terminated because the simple calculator fails more frequently than allowed.}
\par \pard\plain \s2\ilvl1\outlinelevel1\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32{\listtext\pard\plain \tab}\ls1 \li576\ri0\lin576\rin0\fi-576\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{{\*\bkmkstart BMtype_checking}\rtlch \ltrch\loch\lang2057
5}{{\*\bkmkend BMtype_checking}\rtlch \ltrch\loch\lang2057
  The Scala Type System}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
One of the key design principles of the TAkka library, described in the subsequent Chapters, is using type checking to detect some errors at the earliest opportunity. Since both TAkka and Akka are built using the Scala programming language [Odersky et\~al., 2004; Odersky., 2013], this section summarises key features of the Scala type system that benefit the implementation of the TAkka library. }
\par \pard\plain \s3\ilvl2\outlinelevel2\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32{\listtext\pard\plain \tab}\ls1 \li720\ri0\lin720\rin0\fi-720\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{{\*\bkmkstart BMscala_parameterized_type}\rtlch \ltrch\loch\lang2057
5.1}{{\*\bkmkend BMscala_parameterized_type}\rtlch \ltrch\loch\lang2057
  Parameterized Types}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
A }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
parameterized type}{\rtlch \ltrch\loch\lang2057
 }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
T[U}{{\*\updnprop10000}\dn12\rtlch \ltrch\loch
1}{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
,\u8230\'26,U}{{\*\updnprop10000}\dn12\rtlch \ltrch\loch
n}{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
]}{\rtlch \ltrch\loch\lang2057
 consists of a type constructor }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
T}{\rtlch \ltrch\loch\lang2057
 and a positive number of type parameters }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 U}{{\*\updnprop10000}\dn12\rtlch \ltrch\loch
1}{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
,\u8230\'26,U}{{\*\updnprop10000}\dn12\rtlch \ltrch\loch
n}{\rtlch \ltrch\loch\lang2057
 [Odersky., 2013]. The type constructor }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
T}{\rtlch \ltrch\loch\lang2057
 must be a valid type name whereas a type parameter }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
U}{{\*\updnprop10000}\dn12\rtlch \ltrch\loch
i}{\rtlch \ltrch\loch\lang2057
 can either be a specific type value or a type variable. Scala Parameterized Types are similar to Java and C# generics and C++ templates, but express }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
variance}{\rtlch \ltrch\loch\lang2057
 and }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
 bounds}{\rtlch \ltrch\loch\lang2057
 differently as explained later.}
\par \pard\plain \s4\ilvl3\outlinelevel3\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24{\listtext\pard\plain \tab}\ls1 \li864\ri0\lin864\rin0\fi-864\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{{\*\bkmkstart BMscala_generic}\rtlch \ltrch\loch\lang2057
5.1.1}{{\*\bkmkend BMscala_generic}\rtlch \ltrch\loch\lang2057
  Generic Programming}
\par \pard\plain \s40\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\fs24\lang2057
 }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s39\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
Figure }{{\*\bkmkstart BMscala_generic_example}\rtlch \ltrch\loch\lang2057
9}{{\*\bkmkend BMscala_generic_example}\rtlch \ltrch\loch\lang2057
: Scala Example: A Generic Stack Library}{\rtlch \ltrch\loch\lang2057
}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360\sb240\sa0{\rtlch \ltrch\loch\lang2057
To demonstrate how to use Scala parameterized types to do generic programming, Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mscala_generic_example \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
 gives a simple stack library and an associated client application ported from a Java example found in [Naftalin and Wadler, 2006, Example 5-2]. The example defines an abstract data type Stack, an implementation class }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
ArrayStack}{\rtlch \ltrch\loch\lang2057
, a utility method }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
reverse}{\rtlch \ltrch\loch\lang2057
, and client application }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Client}{\rtlch \ltrch\loch\lang2057
.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
In the example, }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Stack}{\rtlch \ltrch\loch\lang2057
 is defined as a }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
trait}{\rtlch \ltrch\loch\lang2057
, which is an analogy to an abstract class that supports multiple inheritance. The }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Stack}{\rtlch \ltrch\loch\lang2057
 trait defines the signature of three methods: }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
empty}{\rtlch \ltrch\loch\lang2057
, }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 push}{\rtlch \ltrch\loch\lang2057
, and }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
pop}{\rtlch \ltrch\loch\lang2057
. A Stack maintains a collection of data to which an entity can be added (the }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
push}{\rtlch \ltrch\loch\lang2057
 operation) or be removed (the }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
pop}{\rtlch \ltrch\loch\lang2057
 operation) in a }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
Last-In-First-Out}{\rtlch \ltrch\loch\lang2057
 order. The }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
empty}{\rtlch \ltrch\loch\lang2057
 method defined in the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 Stack}{\rtlch \ltrch\loch\lang2057
 trait returns }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
true}{\rtlch \ltrch\loch\lang2057
 if the collection does not contain any data. The Stack trait takes a type parameter }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
E}{\rtlch \ltrch\loch\lang2057
 which appears in the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 push}{\rtlch \ltrch\loch\lang2057
 and }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
pop}{\rtlch \ltrch\loch\lang2057
 methods as well. The argument of the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
push}{\rtlch \ltrch\loch\lang2057
 method has type }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
E}{\rtlch \ltrch\loch\lang2057
 so that only data of type }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
E}{\rtlch \ltrch\loch\lang2057
 can be added to the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Stack}{\rtlch \ltrch\loch\lang2057
. Consequently, the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
pop}{\rtlch \ltrch\loch\lang2057
 method is expected to return data of type }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 E}{\rtlch \ltrch\loch\lang2057
.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
The }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
ArrayStack}{\rtlch \ltrch\loch\lang2057
 class implements the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Stack}{\rtlch \ltrch\loch\lang2057
 trait and overrides the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
toString}{\rtlch \ltrch\loch\lang2057
 method which gives a string representation of the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Stack}{\rtlch \ltrch\loch\lang2057
. An }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
ArrayStack}{\rtlch \ltrch\loch\lang2057
 instance internally saves data in a }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 List}{\rtlch \ltrch\loch\lang2057
 so that both prepending an element and removing the first element take constant time.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
The utility method }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
reverse}{\rtlch \ltrch\loch\lang2057
 repeatedly pops data from one stack and pushes it onto the stack to be returned. Different to Java, Scala classes do not have static members. Therefore, the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
reverse}{\rtlch \ltrch\loch\lang2057
 method is defined in a }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
 singleton object}{\rtlch \ltrch\loch\lang2057
, the only instance of a class with the same name. Notice that, the object }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Stacks}{\rtlch \ltrch\loch\lang2057
 is not type-parameterized, but its method }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
reverse}{\rtlch \ltrch\loch\lang2057
 is.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
The }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Client}{\rtlch \ltrch\loch\lang2057
 application creates an empty stack of integers, pushes four integers to it, pops out the last one, and then saves the remainder into a new stack in reverse order. The code }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
stack.push(i)}{\rtlch \ltrch\loch\lang2057
 takes an advantage of the Scala compiler called }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
autoboxing}{\rtlch \ltrch\loch\lang2057
, which converts a primitive type }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 Int}{\rtlch \ltrch\loch\lang2057
 to its corresponding object wrapper class }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Integer}{\rtlch \ltrch\loch\lang2057
. The example code using autoboxing to write cleaner code. }
\par \pard\plain \s4\ilvl3\outlinelevel3\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24{\listtext\pard\plain \tab}\ls1 \li864\ri0\lin864\rin0\fi-864\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{{\*\bkmkstart BMscala_type_bound_example}\rtlch \ltrch\loch\lang2057
5.1.2}{{\*\bkmkend BMscala_type_bound_example}\rtlch \ltrch\loch\lang2057
  Type Bounds}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
In the above section, we defined a type parameterized stack to which only values whose type is the same as its type variable can be pushed. The benefit is that data popped from the type parameterized stack always has expected type. In a sense, the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
push(elt:E):Unit}{\rtlch \ltrch\loch\lang2057
 method of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Stack[E]}{\rtlch \ltrch\loch\lang2057
 specified in Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mscala_generic_example \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
 is overly restrictive because it only accepts an argument of type }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
E}{\rtlch \ltrch\loch\lang2057
, but not data of a subtype of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
E}{\rtlch \ltrch\loch\lang2057
.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mscala_generic_bound_example \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
 gives a more flexible Stack, the types of whose elements are either the same as the type parameter or subtypes of the type parameter. In Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mscala_generic_bound_example \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
, the signature of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
push}{\rtlch \ltrch\loch\lang2057
 is changed to }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
push[T<:E](elt:T):Unit}{\rtlch \ltrch\loch\lang2057
, with an additional type parameter }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
T<:E}{\rtlch \ltrch\loch\lang2057
 which denotes that }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
T}{\rtlch \ltrch\loch\lang2057
 is a subtype of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
E}{\rtlch \ltrch\loch\lang2057
. In Scala, }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
E}{\rtlch \ltrch\loch\lang2057
 is called the }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
upper bound}{\rtlch \ltrch\loch\lang2057
 of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
T}{\rtlch \ltrch\loch\lang2057
. Similarly, }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 T>:E}{\rtlch \ltrch\loch\lang2057
 means }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
T}{\rtlch \ltrch\loch\lang2057
 is a supertype of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
E}{\rtlch \ltrch\loch\lang2057
 and }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
E}{\rtlch \ltrch\loch\lang2057
 is called the }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
 lower bound}{\rtlch \ltrch\loch\lang2057
 of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
T}{\rtlch \ltrch\loch\lang2057
. In Scala, }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Any}{\rtlch \ltrch\loch\lang2057
 is the supertype of all types and }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Nothing}{\rtlch \ltrch\loch\lang2057
 is the subtype of all types.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
The remaining code in Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mscala_generic_bound_example \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
 is the same as the code in Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mscala_generic_example \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
 except that, on line 4 of the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Client}{\rtlch \ltrch\loch\lang2057
 example, the value of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
i}{\rtlch \ltrch\loch\lang2057
 need to be explicitly converted to an }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Integer}{\rtlch \ltrch\loch\lang2057
.}
\par \pard\plain \s40\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\fs24\lang2057
 }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s39\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
Figure }{{\*\bkmkstart BMscala_generic_bound_example}\rtlch \ltrch\loch\lang2057
10}{{\*\bkmkend BMscala_generic_bound_example}\rtlch \ltrch\loch\lang2057
: Scala Example: A Generic Stack Library using Type Bounds}{\rtlch \ltrch\loch\lang2057
}
\par \pard\plain \s4\ilvl3\outlinelevel3\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs24{\listtext\pard\plain \tab}\ls1 \li864\ri0\lin864\rin0\fi-864\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{\rtlch \ltrch\loch\lang2057
5.1.3  Variance Under Inheritance}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
An important issue that is intentionally skirted in Section }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mscala_generic \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
 is how variance under inheritance works in Scala. Specifically, if }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 T}{{\*\updnprop10000}\dn12\rtlch \ltrch\loch
sub}{\rtlch \ltrch\loch\lang2057
 is a subtype of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
T}{\rtlch \ltrch\loch\lang2057
, is }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Stack[T}{{\*\updnprop10000}\dn12\rtlch \ltrch\loch
sub}{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
]}{\rtlch \ltrch\loch\lang2057
 the subtype of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Stack[T]}{\rtlch \ltrch\loch\lang2057
, or reversely?  Unlike Java generic collections [Naftalin and Wadler, 2006], which are always invariant on the type parameter, Scala users can explicitly specify one of the three types of variance as part of the type declaration using variance annotation as summarised in Table }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mscala_variance \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
, paraphrased from [Wampler and Payne, 2009, Table 12.1].}
\par \pard\plain \s41\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\fs24\lang2057
 }
\par \trowd\trql\trleft0\ltrrow\trpaddft3\trpaddt0\trpaddfl3\trpaddl0\trpaddfb3\trpaddb0\trpaddfr3\trpaddr0\cellx1407\cellx6899\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\fs24\lang2057
 }{\rtlch \ltrch\loch\fs24\lang2057
Variance Annotation}\cell\trowd\trql\trleft0\ltrrow\trpaddft3\trpaddt0\trpaddfl3\trpaddl0\trpaddfb3\trpaddb0\trpaddfr3\trpaddr0\cellx1407\cellx6899\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\loch\fs24\lang2057
Description}\cell\cell\row\pard\trowd\trql\trleft0\ltrrow\trpaddft3\trpaddt0\trpaddfl3\trpaddl0\trpaddfb3\trpaddb0\trpaddfr3\trpaddr0\cellx1407\cellx6899\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\fs24\lang2057
 }{\rtlch \ltrch\loch\fs24\lang2057
+}\cell\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\loch\fs24\lang2057
Covariant subclassing. i.e. X[T}{\rtlch \ltrch\loch
sub}{\rtlch \ltrch\loch\fs24\lang2057
] is a subtype of X[T], if T}{\rtlch \ltrch\loch
sub}{\rtlch \ltrch\loch\fs24\lang2057
 is a subtype of T.}\cell\row\pard\trowd\trql\trleft0\ltrrow\trpaddft3\trpaddt0\trpaddfl3\trpaddl0\trpaddfb3\trpaddb0\trpaddfr3\trpaddr0\cellx1407\cellx6899\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\fs24\lang2057
 }{\rtlch \ltrch\loch\fs24\lang2057
-}\cell\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\loch\fs24\lang2057
Contravariant subclassing. i.e. X[T] is a subtype of X[T], if T}{\rtlch \ltrch\loch
sup}{\rtlch \ltrch\loch\fs24\lang2057
 is a supertype of T.}\cell\row\pard\trowd\trql\trleft0\ltrrow\trpaddft3\trpaddt0\trpaddfl3\trpaddl0\trpaddfb3\trpaddb0\trpaddfr3\trpaddr0\cellx1407\cellx6899\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\fs24\lang2057
 }{\rtlch \ltrch\loch\fs24\lang2057
default}\cell\pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\intbl\ql{\rtlch \ltrch\loch\fs24\lang2057
Invariant subclassing. i.e. cannot substitute X[T] or X[T}{\rtlch \ltrch\loch
sub}{\rtlch \ltrch\loch\fs24\lang2057
] for X[T], if T}{\rtlch \ltrch\loch
sub}{\rtlch \ltrch\loch\fs24\lang2057
 is a subtype of T and T is a subtype of T}{\rtlch \ltrch\loch
sup}{\rtlch \ltrch\loch\fs24\lang2057
.}\cell\row\pard\pard\plain \s41\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\fs24\lang2057
 }
\par \pard\plain \s39\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
Table }{{\*\bkmkstart BMscala_variance}\rtlch \ltrch\loch\lang2057
2}{{\*\bkmkend BMscala_variance}\rtlch \ltrch\loch\lang2057
: Variance Under Inheritance}{\rtlch \ltrch\loch\lang2057
}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360\sb240\sa0{\rtlch \ltrch\loch\lang2057
A variance annotation constraints positions where the annotated type variable may appear. Specifically, covariant, contravariant, and invariant type variables can only appear in covariant position, contravariant position, and invariant position respectively. The Scala compiler checks if types with variance are used consistently according to a set of rules given in [Odersky., 2013, Section 4.5]. As a programmer, the author of this thesis often find that it is easier to uses variant types according to a variant of the }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
Get and Put Principle}{\rtlch \ltrch\loch\lang2057
.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
The }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
Get and Put Principle}{\rtlch \ltrch\loch\lang2057
 for Java Generic Collections [Naftalin and Wadler, 2006, Section 2.4] read as the follows: }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li512\ri512\lin512\rin512\fi360\sb60\sa0{\scaps0\caps0\i0\b\rtlch \ltrch\loch\lang2057
The Get and Put Principle:}{\rtlch \ltrch\loch\lang2057
 }{\cf2\rtlch \ltrch\loch\lang2057
Use an extends wildcard}{\rtlch \ltrch\loch\lang2057
 when you only }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
get}{\rtlch \ltrch\loch\lang2057
 values out of a structure, }{\cf2\rtlch \ltrch\loch\lang2057
use a super wildcard}{\rtlch \ltrch\loch\lang2057
 when you only }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
put}{\rtlch \ltrch\loch\lang2057
 values into a structure, and }{\cf2\rtlch \ltrch\loch\lang2057
don\u8217\'19t use a wildcard}{\rtlch \ltrch\loch\lang2057
 when you }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
both}{\rtlch \ltrch\loch\lang2057
 get and put. }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360\sb60\sa0{\rtlch \ltrch\loch\lang2057
When use generic types with variance in Scala, the general version is: }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li512\ri512\lin512\rin512\fi360\sb60\sa0{\scaps0\caps0\i0\b\rtlch \ltrch\loch\lang2057
The General Get and Put Principle:}{\rtlch \ltrch\loch\lang2057
 }{\cf2\rtlch \ltrch\loch\lang2057
Use a type in covariant positions}{\rtlch \ltrch\loch\lang2057
 when you only }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
get}{\rtlch \ltrch\loch\lang2057
 values out of a structure, }{\cf2\rtlch \ltrch\loch\lang2057
use a type in contravariant positions}{\rtlch \ltrch\loch\lang2057
 when you only }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
put}{\rtlch \ltrch\loch\lang2057
 values into a structure, and }{\cf2\rtlch \ltrch\loch\lang2057
use a type in invariant positions}{\rtlch \ltrch\loch\lang2057
 when you }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
both}{\rtlch \ltrch\loch\lang2057
 get and put. }
\par \pard\plain \s40\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\fs24\lang2057
 }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s39\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
Figure }{{\*\bkmkstart BMscala_covariance}\rtlch \ltrch\loch\lang2057
11}{{\*\bkmkend BMscala_covariance}\rtlch \ltrch\loch\lang2057
: Scala Example: A Covariant Immutable Stack}{\rtlch \ltrch\loch\lang2057
}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360\sb240\sa0{\rtlch \ltrch\loch\lang2057
Take the function type for example, a user }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
put}{\rtlch \ltrch\loch\lang2057
s an input value into its input channel, }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
get}{\rtlch \ltrch\loch\lang2057
s a return value from its output channel. According to the General Get and Put Principle, a function is contravariant in the input type and covariant in the output type.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
This section concludes with an immutable Stack that is covariant on its type parameter, as shown in Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mscala_covariance \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
. A stack is covariant on its type parameter because, for example, a stack that saves a collection of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Integer}{\rtlch \ltrch\loch\lang2057
 values is also a stack that saves a collection of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Any}{\rtlch \ltrch\loch\lang2057
 values. However, if the type of Stack is declared as }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Stack[+E]}{\rtlch \ltrch\loch\lang2057
, the signature of its }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
push}{\rtlch \ltrch\loch\lang2057
 method }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
cannot}{\rtlch \ltrch\loch\lang2057
 be }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
while its }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
pop}{\rtlch \ltrch\loch\lang2057
 method always returns a value of type }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
E}{\rtlch \ltrch\loch\lang2057
 ; otherwise, a user can put a value of any type to a stack of integer. The trick is, as shown in the code, making the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Stack[+E]}{\rtlch \ltrch\loch\lang2057
 class an }{\scaps0\caps0\i\b0\rtlch \ltrch\loch\lang2057
immutable}{\rtlch \ltrch\loch\lang2057
 collection whose }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
push}{\rtlch \ltrch\loch\lang2057
 and }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
pop}{\rtlch \ltrch\loch\lang2057
 methods do not modify its content but return a new stack.}
\par \pard\plain \s3\ilvl2\outlinelevel2\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32{\listtext\pard\plain \tab}\ls1 \li720\ri0\lin720\rin0\fi-720\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{\rtlch \ltrch\loch\lang2057
5.2  Scala Type Descriptors}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
As in Java, generic types are erased by the Scala compiler. To record type information that is required at runtime but might be erased, Scala users can ask the compiler to keep the type information by using the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Manifest}{\rtlch \ltrch\loch\lang2057
 class.}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\loch\lang2057
The Scala standard library contains four manifest classes as shown in Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mscala_api_manifest \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
. A }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Manifest[T]}{\rtlch \ltrch\loch\lang2057
 encapsulates the runtime type representation of some type }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
T}{\rtlch \ltrch\loch\lang2057
. }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Manifest[T]}{\rtlch \ltrch\loch\lang2057
 a subtype of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
ClassManifest[T]}{\rtlch \ltrch\loch\lang2057
, which declares methods for subtype (<:<) test and supertest (>:>). The object }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
NoManifest}{\rtlch \ltrch\loch\lang2057
 represents type information that is required by a parameterized type but is not available in scope. }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
OptManifest[+T]}{\rtlch \ltrch\loch\lang2057
 is the supertype of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
ClassManifest[T]}{\rtlch \ltrch\loch\lang2057
 and }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
OptManifest}{\rtlch \ltrch\loch\lang2057
.}
\par \pard\plain \s40\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\fs24\lang2057
 }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s39\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
Figure }{{\*\bkmkstart BMscala_api_manifest}\rtlch \ltrch\loch\lang2057
12}{{\*\bkmkend BMscala_api_manifest}\rtlch \ltrch\loch\lang2057
: Scala API: Manifest Type Hierarchy}{\rtlch \ltrch\loch\lang2057
}
\par \pard\plain \s40\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi360{\rtlch \ltrch\fs24\lang2057
 }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s39\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
Figure }{{\*\bkmkstart BMscala_manifest_example}\rtlch \ltrch\loch\lang2057
13}{{\*\bkmkend BMscala_manifest_example}\rtlch \ltrch\loch\lang2057
: Scala ExampleI: Manifest Example}{\rtlch \ltrch\loch\lang2057
}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360\rtlch \ltrch\loch

\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\pagebb\sl100\slmult0\li0\ri0\lin0\rin0\fi360\sb240\sa0{\rtlch \ltrch\loch\lang2057
The code example in Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mscala_manifest_example \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
 shows common usages of Manifest. There are three ways of obtaining a manifest: using the Methods }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 manifest}{\rtlch \ltrch\loch\lang2057
 (line 16) or }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
classManifest}{\rtlch \ltrch\loch\lang2057
 (line 12), using an implicit parameter of type }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Manifest[T]}{\rtlch \ltrch\loch\lang2057
 (line 21), or using a }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
context bound}{\rtlch \ltrch\loch\lang2057
 of a type parameter (line 26). Context bound can be seen as a syntactic sugar for implicit parameters without a user-specified parameter name. The }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 isSubType}{\rtlch \ltrch\loch\lang2057
 method defined at line 31 tests if the first }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Manifest}{\rtlch \ltrch\loch\lang2057
 represents a type that is a subtype of the typed represented by the second }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
 Manifest}{\rtlch \ltrch\loch\lang2057
.}
\par \pard\plain \s2\ilvl1\outlinelevel1\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32{\listtext\pard\plain \tab}\ls1 \li576\ri0\lin576\rin0\fi-576\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{{\*\bkmkstart BMscala_pattern}\rtlch \ltrch\loch\lang2057
6}{{\*\bkmkend BMscala_pattern}\rtlch \ltrch\loch\lang2057
  Function and Partial Function}
\par \pard\plain \s40\qc\keep\widctlpar\sb120\sa0\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs20\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\fs24\lang2057
 }
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\qc\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
[Sorry. Ignored }{\rtlch \ltrch\loch\lang2057\loch\f6
\\begin\{lstlisting\} ... \\end\{lstlisting\}}{\rtlch \ltrch\loch\lang2057
]}
\par \pard\plain \s39\ql\keep\widctlpar\sb120\sa120\ltrpar\dbch\af8\dbch\af11\afs24\loch\f5\fs24\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
Figure }{{\*\bkmkstart BMscala_pf_f}\rtlch \ltrch\loch\lang2057
14}{{\*\bkmkend BMscala_pf_f}\rtlch \ltrch\loch\lang2057
: Scala Example: PartialFunction and Function}{\rtlch \ltrch\loch\lang2057
}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi360\sb240\sa0{\rtlch \ltrch\loch\lang2057
There are two distinctions between }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Function}{\rtlch \ltrch\loch\lang2057
 and }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
PartialFunction}{\rtlch \ltrch\loch\lang2057
. The advantage of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
PartialFunction}{\rtlch \ltrch\loch\lang2057
 is that users can define a new function that merges the input domains of two other partial functions. The advantage of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
Function}{\rtlch \ltrch\loch\lang2057
 is that the completeness of pattern matching can be checked by the compiler if the input type of the function is a sealed trait or a sealed class, whose sub-classes must be defined in the same file. Figure }{\rtlch \ltrch\loch\lang2057
{\field{\*\fldinst  REF Mscala_pf_f \\h }{\fldrslt Error: Reference source not found}}}{\rtlch \ltrch\loch\lang2057
 gives a Scala example that illustrate the above features. The last function, }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
fruitNameF}{\rtlch \ltrch\loch\lang2057
, shows that the syntactically shorter definition of }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
fruitnamePF}{\rtlch \ltrch\loch\lang2057
 can be equivalently defined. Moreover, because the }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
typedReceive}{\rtlch \ltrch\loch\lang2057
 function should not be visible outside the Actor class, the advantage of using }{\scaps0\caps0\i0\b0\rtlch \ltrch\loch\lang2057\loch\f6
PartialFunction}{\rtlch \ltrch\loch\lang2057
 is not clear. On the other hand, completeness check of message patterns might be a useful feature in practice.}
\par \pard\plain \s2\ilvl1\outlinelevel1\ql\widctlpar\sb240\sa120\keepn\ltrpar\b\dbch\af8\dbch\af11\afs24\loch\f5\fs32{\listtext\pard\plain \tab}\ls1 \li576\ri0\lin576\rin0\fi-576\sl100\slmult0\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\loch\lang2057
2.}{\rtlch \ltrch\loch\lang2057
7  Summing Up}
\par \pard\plain \s0\qj\widctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\dbch\af8\dbch\af11\afs24\cf0\kerning1\langfe2052\alang1081\loch\f5\fs24\lang2057\sl100\slmult0\li0\ri0\lin0\rin0\fi0\sb60\sa0{\rtlch \ltrch\loch\lang2057
To review, the Actor Model [Hewitt et\~al., 1973] is proposed for designing concurrent systems. It is employed by Erlang [Armstrong, 2007b] and other programming languages. Erlang developers designed the Supervision Principle in 1999 when the Erlang/OTP library was released as an open-source project. With the supervision principle, actors are supervised by their supervisors, who are responsible for initializing and monitoring their children. Erlang developers claimed that applications that using the supervision principle have achieved a high availability [Armstrong, 2002]. Recently, the actor programming model and the supervision principle have been ported to Akka, an Actor library written in Scala. Although Scala is a statically typed language and provides a sophistical type system, the type of messages sent to Akka actors are dynamically checked when they are processed. The next chapter presents the design and implementation of the TAkka library where type checks are involved in the earliest opportunity to expose type errors.}
\par }